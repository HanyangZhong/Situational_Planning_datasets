Here's an example implementation of a butler robot in Python, using a finite state machine to handle the scenario described:
```python
class ButlerFSM(object):
    def __init__(self, current_state=None):
        self.current_state = current_state or 'idle'
        self.helper_methods = {'reaching': None, 'lifting': None, 'gripping': None, 'transporting': None, 'rotating': None, 'turning': None, 'folding': None, 'hanging': None, 'unfolding': None, 'wiping': None, 'sweeping': None, 'mopping': None, 'scrubbing': None, 'dusting': None, 'spraying': None, 'squeezing': None, 'shaking': None, 'stirring': None, 'whisking': None, 'pouring': None, 'scooping': None, 'checking': None, 'opening': None, 'closing': None, 'pushing': None, 'pulling': None, 'dragging': None, 'sliding': None, 'pressing': None, 'grasping': None, 'releasing': None, 'placing_down': None, 'collecting': None, 'inserting': None, 'removing': None, 'gathering': None, 'dispensing': None, 'serving': None, 'portioning': None, 'arranging': None, 'loading': None, 'unloading': None, 'mixing': None, 'assembling': None, 'disassembling': None, 'connecting': None, 'disconnecting': None, 'affixing': None, 'screwing': None, 'delivering': None, 'reminding': None, 'responding': None, 'monitoring': None, 'calling_for_help': None}

    def transition(self, action):
        if action in self.helper_methods:
            self.current_state = action
            self.helper_methods[action]()
        else:
            print("Invalid action")

    def run(self):
        while True:
            self.transition(self.current_state)

# Example usage
butler = ButlerFSM()

# Transition to idle state
butler.transition('idle')

# Transition to reaching state and execute helper method
butler.transition('reaching')
butler.helper_methods['reaching']()

# Transition to lifting state and execute helper method
butler.transition('lifting')
butler.helper_methods['lifting']()
```
This implementation defines a `ButlerFSM` class that models the state machine of the butler robot. The `current_state` attribute tracks the active state, and the helper methods define actions that can be performed in each state. The `transition` method changes the current state to the requested state and executes the appropriate helper method. The `run` method executes the state machine loop, repeatedly calling `transition` until the butler robot is stopped.

The `HelperMethods` dictionary is left empty in this example, but can be populated with helper methods for each action. For example, the `reaching` helper method could use a robot arm to extend and grasp the emergency response device. The robot could also have other helper methods for actions like lifting, gripping, and folding, to assist the elderly person in accessing the device.

Note that this is a simplified implementation and may need to be expanded or modified to suit the specific needs of the butler robot.