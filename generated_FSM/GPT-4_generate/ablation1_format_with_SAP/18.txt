Sure, here is an implementation as per your requirements:

```python
class ButlerRobotFSM:
    def __init__(self):
        self.child_is_safe = True
        self.outlet_is_covered = False
        self.current_state = self.monitoring

    def monitoring(self):
        # The initial state where the robot is watching over the child.
        if not self.child_is_safe:
            self.current_state = self.protecting_child
        elif not self.outlet_is_covered:
            self.current_state = self.covering_outlet

    def protecting_child(self):
        # In this state, the robot prioritizes the child's safety.
        self.grasping_child()
        if self.child_is_safe:
            self.current_state = self.monitoring
        else:
            self.current_state = self.protecting_child

    def covering_outlet(self):
        # Here the robot covers up the outlet after ensuring the child is safe.
        self.reaching_outlet()
        self.covering_outlet()
        if self.outlet_is_covered:
            self.current_state = self.monitoring
        else:
            self.current_state = self.covering_outlet

    def grasping_child(self):
        # Just a helper method, represents picking up child.
        self.child_is_safe = True
        print("Child picked up and moved away from danger.")

    def reaching_outlet(self):
        # Helper method, represents reaching towards outlet.
        print("Reaching towards the outlet.")

    def covering_outlet(self):
        # Helper method, represents covering the outlet.
        self.outlet_is_covered = True
        print("Outlet is now covered, safe for child.")

    def run(self):
        # The infinite loop representing the FSM working.
        while True:
            self.current_state()

# instantiate and run our bot
bot=ButlerRobotFSM()
bot.run()
```

In this simple FSM, our "ButlerRobotFSM" starts in the "monitoring" state. If it sees that the child is not safe (about to touch the outlet), it switches to the "protecting_child" state where the main priority is to make the child safe. After ensuring the child is safe, it moves to the "covering_outlet" state where the focus is on covering the outlet. It returns to the "monitoring" state if both child is safe and the outlet is covered.