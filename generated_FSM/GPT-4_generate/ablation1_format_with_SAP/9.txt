Here's the Python class definition for this situation based on Finite State Machine (FSM). I will name the class as "ButlerRobotFSM". The top states of the FSM will be "AssessSituation", "OrganizeMedication", "CleanEnvironment", and so on. 

As the Butler robot, the main tasks are to organize the scattered pill bottles, refill the weekly pill organizer correctly and clean the living area, all whilst continuously monitoring the elderly person and the environment.

Here's an example of how we can implement this:

```python
class ButlerRobotFSM:
    def __init__(self):
        # Initial state
        self.current_state = self.AssessSituation

    def AssessSituation(self):
        # Assess the situation
        if self.is_medication_unorganized():
            return self.OrganizeMedication
        elif self.is_environment_untidy():
            return self.CleanEnvironment
        elif self.does_elderly_need_help():
            return self.AssistElderly
        else:
            return self.MonitorEnvironment

    def OrganizeMedication(self):
        # Organize medication
        if self.is_medication_unorganized():
            self.organize_pills()
            return self.RecheckMedication
        else:
            return self.AssessSituation

    def RecheckMedication(self):
        # Recheck the situation after organizing pills
        if self.is_medication_unorganized():
            return self.OrganizeMedication
        else:
            return self.AssessSituation

    def CleanEnvironment(self):
        # Clean the environment
        if self.is_environment_untidy():
            self.clean_environment()
            return self.RecheckEnvironment
        else:
            return self.AssessSituation

    def RecheckEnvironment(self):
        # Recheck the situation after cleaning
        if self.is_environment_untidy():
            return self.CleanEnvironment
        else:
            return self.AssessSituation

    def AssistElderly(self):
        # Assist the elderly
        if self.does_elderly_need_help():
            self.assist_elderly()
            return self.RecheckElderly
        else:
            return self.AssessSituation

    def RecheckElderly(self):
        # Recheck the situation after assisting
        if self.does_elderly_need_help():
            return self.AssistElderly
        else:
            return self.AssessSituation
    
    def MonitorEnvironment(self):
        # Monitor the environment
        self.monitor_environment()
        return self.AssessSituation
    
    # Helper methods for checking conditions
    def is_medication_unorganized(self):
        """
        Logic for checking if medication is unorganized
        """
        pass

    def is_environment_untidy(self):
        """
        Logic for checking if the environment is untidy
        """
        pass

    def does_elderly_need_help(self):
        """
        Logic for checking if the elderly needs help
        """
        pass

    # Helper methods for executing actions
    def organize_pills(self):
        """
        Logic for organizing the pills
        """
        pass

    def clean_environment(self):
        """
        Logic for cleaning the environment
        """
        pass

    def assist_elderly(self):
        """
        Logic for assisting the elderly
        """
        pass

    def monitor_environment(self):
        """
        Logic for monitoring the environment
        """
        pass

    # Running the state machine
    def run(self):
        while True:
            self.current_state = self.current_state()
```

Just please remember this is a high-level design of the Butler Robot FSM and each method needs to suitably implement logic within it. Happy coding!