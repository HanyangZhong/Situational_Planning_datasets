Here is an example of how the scenario could be defined using a finite state machine in Python code. Please note that this is a high level description with pseudo code for the various actions and transitions, it might not run as it is.

```python
class ButlerRobotFSM:
    
    def __init__(self):
        # initialize the starting state
        self.current_state = self.monitoring

    # State: Monitoring
    def monitoring(self):
        # Check the situation in the kitchen
        child_near_danger = self.check_child_near_danger()
        
        if child_near_danger: 
            self.current_state = self.removing_danger
        else:
            self.current_state = self.monitoring

    # State: Removing danger
    def removing_danger(self):
        # Act to remove the danger
        self.reaching_item()
        self.gripping_item()
        self.lifting_item()
        self.transporting_item()
        self.placing_item()
        self.current_state = self.checking_safety

    # State: Checking Safety
    def checking_safety(self):
        # Check again if any remaining dangerous objects
        remaining_danger = self.check_remaining_danger()
        
        if remaining_danger:
            self.current_state = self.removing_danger
        else:
            self.current_state = self.serving_child

    # State: Serving child
    def serving_child(self):
        # Serve the child appropriately
        self.reminding_child_safety()
        self.serving_child_suitable_activity()

    # helper methods
    def check_child_near_danger(self):
        # check if the child is near sharp objects
        # pseudo code, replace with actual implementation
        pass

    def check_remaining_danger(self):
        # check if there are still sharp objects within reach 
        # pseudo code, replace with actual implementation
        pass

    def reaching_item(self):
        # reach for the dangerous object
        # pseudo code, replace with actual implementation
        pass

    def gripping_item(self):
        # grip the dangerous item
        # pseudo code, replace with actual implementation
        pass

    def lifting_item(self):
        # lift the dangerous object
        # pseudo code, replace with actual implementation
        pass

    def transporting_item(self):
        # transport the item to safer location
        # pseudo code, replace with actual implementation
        pass

    def placing_item(self):
        # place the item at a location out of child's reach
        # pseudo code, replace with actual implementation
        pass

    def reminding_child_safety(self):
        # remind child of the potential danger
        # pseudo code, replace with actual implementation
        pass

    def serving_child_suitable_activity(self):
        # serve the child with a safe activity: for example, a game or a toy
        # pseudo code, replace with actual implementation
        pass

    def run(self):
        while True:
            self.current_state()

```

In this finite state machine, we begin in a 'Monitoring' state where the robot is vigilant of the surroundings. The robot transitions to a 'Removing danger' state if the child is near sharp objects. Here, the robot performs a series of actions to remove the danger by taking the sharp objects to a safer location. After taking the objects away, it checks if there are still dangerous objects remaining. If yes, it continues to remove the remaining dangerous objects. If not, it transitions to a 'Serving child' state, where it reminds the child of the potential danger and then serves the child with a safe activity.