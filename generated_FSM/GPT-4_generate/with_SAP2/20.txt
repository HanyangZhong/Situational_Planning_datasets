To create a finite state machine (FSM) for a butler robot in the described living room scene, we'll define various states and transitions that guide the robot's actions in assisting the elderly person. The states will be designed to respond to the immediate needs of the person and to address the emergency situation effectively.

Here's an example of how the code might be structured:

```python
class ButlerRobotFSM:
    def __init__(self):
        # Define the states of the finite state machine
        self.states = {
            'INITIAL': self.initial_state,
            'ASSESS_SITUATION': self.assess_situation_state,
            'APPROACH_ELDERLY': self.approach_elderly_state,
            'GET_EMERGENCY_DEVICE': self.get_emergency_device_state,
            'ASSIST_ELDERLY': self.assist_elderly_state,
            'CALL_FOR_HELP': self.call_for_help_state,
            'MONITOR_ELDERLY': self.monitor_elderly_state
        }
        # Set the initial state
        self.current_state = 'INITIAL'

    def initial_state(self):
        # Initial state of the robot. Starts by assessing the situation.
        self.current_state = 'ASSESS_SITUATION'

    def assess_situation_state(self):
        # Assess the situation to determine the next action.
        if self.is_elderly_in_distress():
            self.current_state = 'APPROACH_ELDERLY'
        else:
            self.current_state = 'MONITOR_ELDERLY'

    def approach_elderly_state(self):
        # Approach the elderly person to offer assistance.
        self.approach('elderly')
        self.current_state = 'GET_EMERGENCY_DEVICE'

    def get_emergency_device_state(self):
        # Retrieve the emergency device from the high shelf.
        self.reaching('emergency device')
        self.grasping('emergency device')
        self.lowering('emergency device')
        self.current_state = 'ASSIST_ELDERLY'

    def assist_elderly_state(self):
        # Assist the elderly person using the emergency device.
        self.activating('emergency device')
        self.current_state = 'CALL_FOR_HELP'

    def call_for_help_state(self):
        # Call for additional help if needed.
        self.calling_for_help()
        self.current_state = 'MONITOR_ELDERLY'

    def monitor_elderly_state(self):
        # Continuously monitor the elderly person's condition.
        if self.is_elderly_stable():
            self.current_state = 'INITIAL'
        else:
            self.current_state = 'CALL_FOR_HELP'

    # Action methods (these would contain the actual implementation of actions)
    def is_elderly_in_distress(self):
        # Check if the elderly person is in distress
        pass

    def approach(self, target):
        # Approach a target
        pass

    def reaching(self, item):
        # Reach for an item
        pass

    def grasping(self, item):
        # Grasp an item
        pass

    def lowering(self, item):
        # Lower an item
        pass

    def activating(self, device):
        # Activate a device
        pass

    def calling_for_help(self):
        # Call for help
        pass

    def is_elderly_stable(self):
        # Check if the elderly person's condition is stable
        pass

    # Run the FSM loop    
    def run(self):
        while True:
            self.states[self.current_state]()

# Create an instance of the butler robot and run it
butler_robot = ButlerRobotFSM()
butler_robot.run()
```

This code represents an FSM for a butler robot tasked with assisting an elderly person in distress. Each state corresponds to a specific action or assessment, with transitions based on the situation's demands and the elderly person's needs. The action methods (`is_elderly_in_distress`, `approach`, `reaching`, etc.) would contain the actual implementation of these actions, which could involve physical movements, sensor readings, and decision-making processes.