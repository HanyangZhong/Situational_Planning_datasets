Here's an example of how you could implement a HFSM with Python based on the scene provided:

```python
class KitchenSafetyHFSM:
    def __init__(self):
        # Setup states for the state machine
        self.states = {
            'MONITORING': self.check_state,
            'REMOVING_HAZARDS': self.remove_hazards_state,
            'RELOCATING_CAT': self.relocate_cat_state,
            'SECURING_AREA': self.secure_area_state,
            'ALERTING_OWNER': self.alert_owner_state
        }
        
        # Set initial state
        self.current_state = 'MONITORING'
        
    def check_state(self):
        # Monitor situation, if the cat is heading towards toxic foods, remove hazards
        if self.cat_near_toxic_foods():
            self.current_state = 'REMOVING_HAZARDS'
        elif self.cat_on_the_way():
            self.current_state = 'RELOCATING_CAT'
        else:
            self.current_state = 'SECURING_AREA'

    def remove_hazards_state(self):
        # If cat is near toxic foods, remove them to a safe distance
        self.gripping('chocolate')
        self.lifting('chocolate')
        self.transporting('chocolate', 'safe_place')
        self.releasing('chocolate')

        # Repeat above steps for grapes and onions
        self.remove_toxic_food('grapes')
        self.remove_toxic_food('onions')

        self.securing_area_state()

    def relocate_cat_state(self):
        # Relocate cat to a safer area
        self.transporting('cat', 'safe_area')
        self.current_state = 'SECURING_AREA'

    def secure_area_state(self):
        # Secure kitchen area, raise alarm if cat is in danger
        self.check_area_safe()
        if not self.is_area_safe():
            self.alert_owner_state()

        self.current_state = 'MONITORING'

    def alert_owner_state(self):
        # Alert the owner for taking further actions
        self.calling_for_help('owner')
        self.current_state = 'MONITORING'
    
    # Action methods
    def cat_near_toxic_foods(self):
        return self.monitoring('cat', 'toxic foods')

    def remove_toxic_food(self, food):
        self.gripping(food)
        self.lifting(food)
        self.transporting(food, 'safe_place')
        self.releasing(food)
    
    def cat_on_the_way(self):
        return self.checking('cat', 'countertop')

    def check_area_safe(self):
        self.monitoring('toxic foods', 'countertop')

    def is_area_safe(self):
        # Insert safety check logic here

    def calling_for_help(self, owner):
        # Insert call logic here
    
    # Run the FSM loop
    def run(self):
        while True:
            self.states[self.current_state]()
            

# Create and run the HFSM
kitchen_safety_bot = KitchenSafetyHFSM()
kitchen_safety_bot.run()
```

The above code sets up our kitchen safety helper FSM, with states that monitor the situation, handle the pet hazard, secure the kitchen area, and alert the owner when necessary. Each state watches for certain conditions, then calls an action method when that condition is met. The action methods should be defined to perform the stated tasks in proper pythonic way. 

Remember to handle potential infinite loop in your `run` method.