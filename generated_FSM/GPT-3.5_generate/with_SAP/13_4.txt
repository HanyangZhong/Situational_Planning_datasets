class KitchenSafetyHFSM:
    def __init__(self):
        self.states = {
            'INITIAL': self.initial_state,
            'ASSESS': self.assess_state,
            'REMOVE_HAZARD': self.remove_hazard_state,
            'INFORM_WOMAN': self.inform_woman_state,
            'WAIT': self.wait_state,
            'CALL_FOR_HELP': self.call_for_help_state,
        }
        self.current_state = 'INITIAL'

    def initial_state(self):
        print("Butler Robot: Assessing the situation...")
        self.current_state = 'ASSESS'

    def assess_state(self):
        if self.has_hazard():
            print("Butler Robot: Hazard detected!")
            self.current_state = 'REMOVE_HAZARD'
        else:
            print("Butler Robot: No immediate hazard detected.")
            self.current_state = 'WAIT'

    def remove_hazard_state(self):
        print("Butler Robot: Removing the hazard...")
        self.reach('cleaning products')
        self.grasp('cleaning products')
        self.lift('cleaning products')
        self.lower('cleaning products')
        self.release('cleaning products')
        print("Butler Robot: Hazard removed.")
        self.current_state = 'INFORM_WOMAN'

    def inform_woman_state(self):
        print("Butler Robot: Informing the woman about the hazard...")
        self.monitor('woman')
        self.respond('woman', 'hazard removed')
        print("Butler Robot: Woman informed.")
        self.current_state = 'WAIT'

    def wait_state(self):
        print("Butler Robot: Waiting for further instructions...")
        self.monitor('woman')
        if self.is_help_needed():
            print("Butler Robot: Help needed!")
            self.current_state = 'CALL_FOR_HELP'

    def call_for_help_state(self):
        print("Butler Robot: Calling for help...")
        self.call('emergency services')
        print("Butler Robot: Help has been called.")
        self.current_state = 'WAIT'

    # Actions / Annotation functions
    def has_hazard(self):
        print("Butler Robot: Checking for hazards...")
        hazard_present = self.checking('cleaning products')
        return hazard_present

    def reach(self, object):
        print(f"Butler Robot: Reaching for {object}...")

    def grasp(self, object):
        print(f"Butler Robot: Gripping {object}...")

    def lift(self, object):
        print(f"Butler Robot: Lifting {object}...")

    def lower(self, object):
        print(f"Butler Robot: Lowering {object}...")

    def release(self, object):
        print(f"Butler Robot: Releasing {object}...")

    def monitor(self, object):
        print(f"Butler Robot: Monitoring {object}...")

    def respond(self, object, message):
        print(f"Butler Robot: Responding to {object} - {message}...")

    def is_help_needed(self):
        print("Butler Robot: Checking if help is needed...")
        help_needed = self.checking('help needed')
        return help_needed

    def call(self, contact):
        print(f"Butler Robot: Calling {contact}...")

    # Run the HFSM loop
    def run(self):
        while True:
            self.states[self.current_state]()


# Create an instance of the HFSM and run it
kitchen_safety = KitchenSafetyHFSM()
kitchen_safety.run()