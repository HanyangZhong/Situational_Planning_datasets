class ButlerRobotFSM:
    def __init__(self):
        # Setup the states in the finite state machine
        self.states = {
            'INITIAL': self.initial_state,
            'ASSESS_SITUATION': self.assess_situation_state,
            'RETRIEVE_WHEELCHAIR': self.retrieve_wheelchair_state,
            'REACH_EMERGENCY_BUTTON': self.reach_emergency_button_state,
            'CALL_FOR_HELP': self.call_for_help_state,
            'WAIT_FOR_HELP': self.wait_for_help_state
        }
        # Set the initial state
        self.current_state = 'INITIAL'

    def initial_state(self):
        # Butler Robot starts by assessing the situation
        print("Assessing the situation...")
        if self.is_emergency_button_reachable():
            self.current_state = 'REACH_EMERGENCY_BUTTON'
        else:
            self.current_state = 'RETRIEVE_WHEELCHAIR'

    def assess_situation_state(self):
        # Assess if the emergency button is reachable
        if self.is_emergency_button_reachable():
            self.current_state = 'REACH_EMERGENCY_BUTTON'
        else:
            self.current_state = 'RETRIEVE_WHEELCHAIR'

    def retrieve_wheelchair_state(self):
        # Retrieve the wheelchair to help the disabled person
        print("Retrieving the wheelchair...")
        self.current_state = 'REACH_EMERGENCY_BUTTON'

    def reach_emergency_button_state(self):
        # Move towards and reach the emergency button
        print("Moving towards the emergency button...")
        self.current_state = 'CALL_FOR_HELP'

    def call_for_help_state(self):
        # Call for human assistance
        print("Calling for help...")
        self.current_state = 'WAIT_FOR_HELP'

    def wait_for_help_state(self):
        # Wait for human assistance
        print("Waiting for help...")

    # Actions / Annotation methods
    def is_emergency_button_reachable(self):
        # Check if the emergency button is within reach
        emergency_button_reachable = self.checking('emergency button reachability')
        return emergency_button_reachable

    def checking(self, item):
        # Simulate the check action
        print("Checking", item)
        return True  # Simulated result, assume everything is reachable

    # Run the FSM loop
    def run(self):
        while True:
            self.states[self.current_state]()