class MedicationManagementFSM:

    def __init__(self):
        # Setup the states in the finite state machine
        self.states = (
            'INITIAL': self.initial_state,
            'ASSESS_SITUATION': self.assess_situation_state,
            'ORGANIZE_MEDICATIONS': self.organize_medications_state,
            'REFILL_ORGANIZER': self.refill_organizer_state,
            'CLEAN_UP': self.clean_up_state,
            'CALL_FOR_HELP': self.call_for_help_state
        )
        # Set the initial state
        self.current_state = 'INITIAL'

    def initial_state(self):
        # Medication Management Robot initial state. Start with an assessment.
        self.current_state = 'ASSESS_SITUATION'

    def assess_situation_state(self):
        # Assess the medication management situation
        if self.is_disorder_present():
            self.current_state = 'ORGANIZE_MEDICATIONS'
        elif self.is_organizer_empty():
            self.current_state = 'REFILL_ORGANIZER'
        else:
            self.current_state = 'CLEAN_UP'

    def organize_medications_state(self):
        # Organize the scattered pill bottles
        self.gathering('pill bottles')
        self.arranging('pill bottles', 'in an organized manner')
        self.current_state = 'REFILL_ORGANIZER'

    def refill_organizer_state(self):
        # Refill the weekly pill organizer
        self.opening('weekly pill organizer')
        self.collecting('pill bottles')
        self.portioning('medications', 'into the organizer')
        self.closing('weekly pill organizer')
        self.current_state = 'CLEAN_UP'

    def clean_up_state(self):
        # Clean up the living area
        self.wiping('spilled glass of water')
        self.dusting('side table')
        self.spot_checking('newspaper')
        self.current_state = 'INITIAL'

    def call_for_help_state(self):
        # Call for human assistance if the medication management is too chaotic to handle
        self.calling_for_help()
        self.current_state = 'INITIAL'

    # Actions / Annotation methods
    def is_disorder_present(self):
        disorder_present = self.checking('pill bottles', 'disorder')
        return disorder_present

    def is_organizer_empty(self):
        organizer_empty = self.checking('weekly pill organizer', 'empty')
        return organizer_empty

    def gathering(self, item):
        print("Gathering", item)

    def arranging(self, item, location):
        print("Arranging", item, "in", location)

    def opening(self, item):
        print("Opening", item)

    def collecting(self, item):
        print("Collecting", item)

    def portioning(self, item, location):
        print("Portioning", item, "into", location)

    def closing(self, item):
        print("Closing", item)

    def wiping(self, item):
        print("Wiping", item)

    def dusting(self, item):
        print("Dusting", item)

    def spot_checking(self, item):
        print("Spot checking", item)

    def calling_for_help(self):
        print("Calling for help")

    # Run the FSM loop    
    def run(self):
        while True:
            self.states[self.current_state]()


# Create an instance of the FSM and run it
medication_robot = MedicationManagementFSM()
medication_robot.run()